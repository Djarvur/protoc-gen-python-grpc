# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

{{if .Services}}
{{-  $Package  := .Package -}}
{{- $FileName  := .Name -}}
{{- $Alias     := join "" ($Package | replace  "_" "__" | replace "." "_dot_") "_dot_" ($FileName | baseName "/" | trimSuffix ".") "__pb2" -}}
from {{$Package}} import {{baseName "/" $FileName | trimSuffix "."}}_pb2 as {{$Alias}}

{{range $Service := .Services}}
class {{$Service.Name}}Stub(object):
    """{{range split "\n" $Service.Comment}}{{.}}
    {{end}}"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
{{- range $Method := $Service.Methods}}
        self.{{$Method.Name}} = channel.{{if $Method.ClientStreaming}}stream{{else}}unary{{end}}_{{if $Method.ServerStreaming}}stream{{else}}unary{{end}}(
                '/{{$Package}}.{{$Service.Name}}/{{$Method.Name}}',
                request_serializer={{$Alias}}.{{baseName "." $Method.Request}}.SerializeToString,
                response_deserializer={{$Alias}}.{{baseName "." $Method.Response}}.FromString,
                )
{{- end}}


class {{$Service.Name}}Servicer(object):
    """{{range split "\n" $Service.Comment}}{{.}}
    {{end}}"""
{{range $Method := $Service.Methods}}
    def {{$Method.Name}}(self, request, context):
        """{{range split "\n" $Method.Comment}}{{.}}
        {{end}}"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
{{end}}

def add_{{$Service.Name}}Servicer_to_server(servicer, server):
    rpc_method_handlers = {
{{- range $Method := $Service.Methods}}
            '{{$Method.Name}}': grpc.{{if $Method.ClientStreaming}}stream{{else}}unary{{end}}_{{if $Method.ServerStreaming}}stream{{else}}unary{{end}}_rpc_method_handler(
                    servicer.{{$Method.Name}},
                    request_deserializer={{$Alias}}.{{baseName "." $Method.Request}}.FromString,
                    response_serializer={{$Alias}}.{{baseName "." $Method.Response}}.SerializeToString,
            ),
{{- end}}
    }
    generic_handler = grpc.method_handlers_generic_handler(
            '{{$Package}}.{{$Service.Name}}', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class {{$Service.Name}}(object):
    """{{range split "\n" $Service.Comment}}{{.}}
    {{end}}"""
{{range $Method := $Service.Methods}}
    @staticmethod
    def {{$Method.Name}}(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.{{if $Method.ClientStreaming}}stream{{else}}unary{{end}}_{{if $Method.ServerStreaming}}stream{{else}}unary{{end}}(request, target, '/{{$Package}}.{{$Service.Name}}/{{$Method.Name}}',
            {{$Alias}}.{{baseName "." $Method.Request}}.SerializeToString,
            {{$Alias}}.{{baseName "." $Method.Response}}.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
{{end}}{{end}}{{end}}